// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BVAR
List BVAR(arma::mat series, int p, arma::mat C, arma::mat V0, arma::mat Phi0, int df, bool include_mean);
RcppExport SEXP _RcppBVAR_BVAR(SEXP seriesSEXP, SEXP pSEXP, SEXP CSEXP, SEXP V0SEXP, SEXP Phi0SEXP, SEXP dfSEXP, SEXP include_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type series(seriesSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi0(Phi0SEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(BVAR(series, p, C, V0, Phi0, df, include_mean));
    return rcpp_result_gen;
END_RCPP
}
// Forecast
List Forecast(List model, int h);
RcppExport SEXP _RcppBVAR_Forecast(SEXP modelSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(Forecast(model, h));
    return rcpp_result_gen;
END_RCPP
}
// freqVAR
List freqVAR(arma::mat series, int p, bool include_mean);
RcppExport SEXP _RcppBVAR_freqVAR(SEXP seriesSEXP, SEXP pSEXP, SEXP include_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type series(seriesSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type include_mean(include_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(freqVAR(series, p, include_mean));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _RcppBVAR_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _RcppBVAR_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _RcppBVAR_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _RcppBVAR_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppBVAR_BVAR", (DL_FUNC) &_RcppBVAR_BVAR, 7},
    {"_RcppBVAR_Forecast", (DL_FUNC) &_RcppBVAR_Forecast, 2},
    {"_RcppBVAR_freqVAR", (DL_FUNC) &_RcppBVAR_freqVAR, 3},
    {"_RcppBVAR_rcpparma_hello_world", (DL_FUNC) &_RcppBVAR_rcpparma_hello_world, 0},
    {"_RcppBVAR_rcpparma_outerproduct", (DL_FUNC) &_RcppBVAR_rcpparma_outerproduct, 1},
    {"_RcppBVAR_rcpparma_innerproduct", (DL_FUNC) &_RcppBVAR_rcpparma_innerproduct, 1},
    {"_RcppBVAR_rcpparma_bothproducts", (DL_FUNC) &_RcppBVAR_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppBVAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
